#!/bin/bash -eu

FILE_OPENED=0

if [ -f /Applications/MacVim.app/Contents/bin/mvim ]; then
    # This is the MacVim path for launching from a terminal.
    gvim='/Applications/MacVim.app/Contents/bin/mvim'
elif [ -f /usr/local/bin/gvim ]; then
    gvim='/usr/local/bin/gvim'
else
    gvim='/usr/bin/gvim'
fi

function open-file() {
    local file
    # Turn foo.py::Klass::method into foo.py automatically.
    file="${1%%::*}"
    local dir
    dir="$(dirname -- "$file")"

    # Automatically create parent directories for files we edit.
    mkdir -p "$dir"
    $gvim --remote-tab-silent "$file" > /dev/null 2>&1
    FILE_OPENED=1
}

# Change the GTK theme to fix a KDE Neon balloon bug.
if [ -d /usr/share/themes/Breeze-Dark/ ]; then
    export GTK_THEME=Breeze-Dark
fi

if ! [ -t 0 ]; then
    # If we are piping lines into this script, then open them with gvim.
    while read -r; do
        open-file "$REPLY"

        # Switch to the window on Linux
        if ! [[ "$OSTYPE" =~ ^darwin ]]; then
            ~/script/linux/raise-by-class gvim
        fi
    done
else
    # If we are taking arguments, then read those.
    for filename in "$@"; do
        open-file "$filename"
    done

    if ! ((FILE_OPENED)); then
        # If we have no files as arguments, then open a new tab and focus
        # the window.
        $gvim --remote-send '<Esc>:tablast<CR><Esc>:tabnew<CR>' \
            > /dev/null 2>&1 || $gvim > /dev/null 2>&1
    fi

    # Switch to the window on Linux
    if ! [[ "$OSTYPE" =~ ^darwin ]]; then
        ~/script/linux/raise-by-class gvim
    fi
fi
